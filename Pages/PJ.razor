@page "/PJ"

@inject IStringLocalizer<PJ> localizer;

<MatHeadline4>@PJLabel</MatHeadline4>

<MatCard style="main-mat-card">
    <MatHeadline5>@salaryLabel</MatHeadline5>
    <MatCardContent>
        <div class="mat-card-content">
            <MatTextField Value="@grossIncome" OnInput="@(e => this.updateField(ref grossIncome, (ChangeEventArgs)e))" Label=@grossIncomeLabel Outlined="true" />
            <MatTextField Value="@ownerSalary" OnInput="@(e => this.updateField(ref ownerSalary, (ChangeEventArgs)e))" Label=@ownerSalaryLabel Outlined="true" />
        </div>
    </MatCardContent>
</MatCard>

<MatCard style="main-mat-card">
    <MatHeadline5>@costsLabel</MatHeadline5>
    <MatCardContent>
        <div class="mat-card-content">
            <MatTextField Value="@accountantCost" OnInput="@(e => this.updateField(ref accountantCost, (ChangeEventArgs)e))" Label=@accountantCostLabel Outlined="true" />
        </div>
    </MatCardContent>
</MatCard>

<MatCard style="main-mat-card">
    <MatHeadline5>@rFactorLabel</MatHeadline5>
    <MatCardContent>
        <div class="mat-card-content">
            <MatTextField Value="@annex" OnInput="@(e => this.updateField(ref annex, (ChangeEventArgs)e))" Label=@annexLabel Outlined="true"  />
            <MatTextField @bind-Value="@rFactor" Label=@rFactorLabel ReadOnly="true" Outlined="true" />
        </div>
    </MatCardContent>
</MatCard>

<MatCard style="main-mat-card">
    <MatHeadline5>@taxesLabel</MatHeadline5>
    <MatCardContent>
        <div class="mat-card-content">
            <MatTextField @bind-Value="@DAS" Label=@dasLabel ReadOnly="true" Outlined="true" />
            <MatTextField @bind-Value="@IRRF" Label=@irrfLabel ReadOnly="true" Outlined="true" />
            <MatTextField @bind-Value="@gpsINSS" Label=@gpsInssLabel ReadOnly="true" Outlined="true" />
            <MatTextField Value="@siteInspectionTax" OnInput="@(e => this.updateField(ref siteInspectionTax, (ChangeEventArgs)e))" Label=@siteInspectionTaxLabel Outlined="true" />
        </div>
    </MatCardContent>
</MatCard>

<MatCard style="main-mat-card">
    <MatHeadline5>@netIncomeLabel</MatHeadline5>
    <MatCardContent>
        <div class="mat-card-content">
            <MatTextField @bind-Value="@monthlyNetIncome" Label=@monthlyNetIncomeLabel ReadOnly="true" Outlined="true"/>
            <MatTextField @bind-Value="@yearlyNetIncome" Label=@yearlyNetIncomeLabel ReadOnly="true" Outlined="true"/>
        </div>
    </MatCardContent>
</MatCard>

@code {
    private string grossIncomeLabel;
    private string PJLabel;
    private string salaryLabel;
    private string ownerSalaryLabel;
    private string costsLabel;
    private string accountantCostLabel;
    private string taxesLabel;
    private string dasLabel;
    private string irrfLabel;
    private string gpsInssLabel;
    private string siteInspectionTaxLabel;
    private string annexLabel;
    private string rFactorLabel;
    private string netIncomeLabel;
    private string monthlyNetIncomeLabel;
    private string yearlyNetIncomeLabel;

    private double grossIncome;
    private double ownerSalary;
    private double accountantCost;
    private double DAS;
    private double IRRF;
    private double gpsINSS;
    private double siteInspectionTax;
    private int annex;
    private double rFactor;
    private double monthlyNetIncome;
    private double yearlyNetIncome;

    protected override void OnInitialized()
    {
        PJLabel = localizer["PJ"];
        salaryLabel = localizer["salary"];
        grossIncomeLabel = localizer["grossIncome"];
        ownerSalaryLabel = localizer["ownerSalary"];
        costsLabel = localizer["costs"];
        accountantCostLabel = localizer["accountantCosts"];
        taxesLabel = localizer["taxes"];
        dasLabel = localizer["das"];
        irrfLabel = localizer["irrf"];
        gpsInssLabel = localizer["gpsInss"];
        siteInspectionTaxLabel = localizer["siteInspectionTax"];
        annexLabel = localizer["annex"];
        rFactorLabel = localizer["rFactor"];
        netIncomeLabel = localizer["netIncome"];
        monthlyNetIncomeLabel = localizer["monthlyNetIncome"];
        yearlyNetIncomeLabel = localizer["yearlyNetIncome"];

        annex = 1;
    }

    private void updateField(ref double field, ChangeEventArgs eventArgs) {
        try {
            field = (double)Convert.ToDecimal(eventArgs.Value);
        }
        catch (Exception e) {
           if(e is InvalidCastException || e is FormatException) {
               field = 0;
               return;
           }

           throw;
        }
        finally {
            this.calculateTaxes();
            this.calculateNetIncome();
        }
    }

    private void updateField(ref int field, ChangeEventArgs eventArgs) {
        try {
            Console.WriteLine("eventArgs.Value: " + eventArgs.Value);
            field = (int)Convert.ToInt16(eventArgs.Value);
        }
        catch (Exception e) {
           if(e is InvalidCastException || e is FormatException) {
               field = 1;
               return;
           }

           throw;
        }
        finally {
            this.calculateTaxes();
            this.calculateNetIncome();
        }
    }

    private void calculateTaxes() {
        RFactorCalculator rFactorCalculator = new RFactorCalculator();
        this.rFactor = rFactorCalculator.calculateRFactor(this.grossIncome, this.ownerSalary);

        DASCalculator dasCalulator = new DASCalculator();
        this.DAS = dasCalulator.calculateDAS(this.grossIncome, this.rFactor, this.annex);

        IncomeTaxCalculator incomeTaxCalculator = new IncomeTaxCalculator();
        this.gpsINSS = incomeTaxCalculator.calculateOwnerSalaryINSS(this.ownerSalary);
        this.IRRF = incomeTaxCalculator.calculateIRRF(this.ownerSalary, this.gpsINSS);
    }

    private void calculateNetIncome() {
        this.monthlyNetIncome = grossIncome - this.IRRF - this.gpsINSS - this.DAS - (this.siteInspectionTax / 12) - this.accountantCost;
        this.yearlyNetIncome = this.monthlyNetIncome * 12;
        
    }
}   