@page "/CLT"

@inject IStringLocalizer<CLT> localizer;

<MatHeadline4>@CLTLabel</MatHeadline4>

<div>
    <MatHeadline5>@salaryLabel</MatHeadline5>
        <div>
            <MatTextField Value="@grossIncome" OnInput="@(e => this.updateField(ref grossIncome, (ChangeEventArgs)e))" Label=@grossIncomeLabel Outlined="true"/>
        </div>
</div>

<div>
    <MatHeadline5>@benefitsLabel</MatHeadline5>
    <div>
        <MatTextField Value="@VR" OnInput="@(e => this.updateField(ref VR, (ChangeEventArgs)e))" Label=@VRLabel Outlined="true"/>
        <MatTextField Value="@VA" OnInput="@(e => this.updateField(ref VA, (ChangeEventArgs)e))" Label=@VALabel Outlined="true"/>
        <MatTextField Value="@healthInsurance" OnInput="@(e => this.updateField(ref healthInsurance, (ChangeEventArgs)e))" Label=@healthInsuranceLabel Outlined="true"/>
        <MatTextField Value="@VT" OnInput="@(e => this.updateField(ref VT, (ChangeEventArgs)e))" Label=@VTLabel Outlined="true"/>
        <MatTextField Value="@lifeInsurance" OnInput="@(e => this.updateField(ref lifeInsurance, (ChangeEventArgs)e))" Label=@lifeInsuranceLabel Outlined="true"/>
        <MatTextField Value="@PLR" OnInput="@(e => this.updateField(ref PLR, (ChangeEventArgs)e))" Label=@PLRLabel Outlined="true"/>
    </div>
</div>

<div>
    <MatHeadline5>@lawBenefitsLabel</MatHeadline5>
    <div>
        <MatTextField @bind-Value="@FGTS" Label=@FGTSLabel ReadOnly="true" Outlined="true"/>
        <MatTextField @bind-Value="@thirteenthSalary" Label=@thirteenthSalaryLabel ReadOnly="true" Outlined="true"/>
        <MatTextField @bind-Value="@paidVacation" Label=@paidVacationLabel ReadOnly="true" Outlined="true"/>
    </div>
</div>

<div>
    <MatHeadline5>@taxesLabel</MatHeadline5>
    <div>
        <MatTextField @bind-Value="@IRRF" Label=@IRRFLabel ReadOnly="true" Outlined="true"/>
        <MatTextField @bind-Value="@INSS" Label=@INSSLabel ReadOnly="true" Outlined="true"/>
    </div>
</div>

<div>
    <MatHeadline5>@netIncomeLabel</MatHeadline5>
    <div>
        <MatTextField @bind-Value="@monthlyNetIncome" Label=@monthlyNetIncomeLabel ReadOnly="true" Outlined="true"/>
        <MatTextField @bind-Value="@yearlyNetIncome" Label=@yearlyNetIncomeLabel ReadOnly="true" Outlined="true"/>
    </div>
</div>

@code {
    private string grossIncomeLabel;
    private string CLTLabel;
    private string salaryLabel;
    private string benefitsLabel;
    private string VRLabel;
    private string VALabel;
    private string healthInsuranceLabel;
    private string VTLabel;
    private string lifeInsuranceLabel;
    private string PLRLabel;
    private string lawBenefitsLabel;
    private string FGTSLabel;
    private string thirteenthSalaryLabel;
    private string paidVacationLabel;
    private string taxesLabel;
    private string IRRFLabel;
    private string INSSLabel;
    private string netIncomeLabel;
    private string monthlyNetIncomeLabel;
    private string yearlyNetIncomeLabel;

    private double grossIncome;
    private double VR;
    private double VA;
    private double healthInsurance;
    private double VT;
    private double lifeInsurance;
    private double PLR;
    private double FGTS;
    private double thirteenthSalary;
    private double paidVacation;
    private double IRRF;
    private double INSS ;
    private double monthlyNetIncome;
    private double yearlyNetIncome;

    protected override void OnInitialized()
    {
        grossIncomeLabel = localizer["grossIncome"];
        CLTLabel = localizer["CLT"];
        salaryLabel = localizer["salary"];
        benefitsLabel = localizer["benefits"];
        VRLabel = localizer["VR"];
        VALabel = localizer["VA"];
        healthInsuranceLabel = localizer["healthInsurance"];
        VTLabel = localizer["VT"];
        lifeInsuranceLabel = localizer["lifeInsurance"];
        PLRLabel = localizer["PLR"];
        lawBenefitsLabel = localizer["lawBenefits"];
        FGTSLabel = localizer["FGTS"];
        thirteenthSalaryLabel = localizer["thirteenthSalary"];
        paidVacationLabel = localizer["paidVacation"];
        taxesLabel = localizer["taxes"];
        IRRFLabel = localizer["IRRF"];
        INSSLabel = localizer["INSS"];
        netIncomeLabel = localizer["netIncome"];
        monthlyNetIncomeLabel = localizer["monthlyNetIncome"];
        yearlyNetIncomeLabel = localizer["yearlyNetIncome"];
    }

    private void updateField(ref double field, ChangeEventArgs eventArgs) {
        try {
            field = (double)Convert.ToDecimal(eventArgs.Value);
        }
        catch (Exception e) {
           if(e is InvalidCastException || e is FormatException) {
               field = 0;
               return;
           }

           throw;
        }
        finally {
            this.calculateLawBenefits();
            this.calculateTaxes();
            this.calculateNetIncome();
        }
    }

    private void calculateLawBenefits() {
        FGTSCalculator fgtsCalculator = new FGTSCalculator();
        this.FGTS = fgtsCalculator.calculateFGTS(grossIncome);

        ThirteenthSalaryCalculator thirteenthSalaryCalculator = new ThirteenthSalaryCalculator();
        this.thirteenthSalary = thirteenthSalaryCalculator.calculateThirteenthSalary(this.grossIncome);

        PaidVacationCalculator paidVacationCalculator = new PaidVacationCalculator();
        this.paidVacation = paidVacationCalculator.calculatePaidVacation(this.grossIncome);
    }

    private void calculateTaxes() {
        IncomeTaxCalculator incomeTaxCalculator = new IncomeTaxCalculator();
        this.INSS = incomeTaxCalculator.calculateINSS(this.grossIncome);
        this.IRRF = incomeTaxCalculator.calculateIRRF(this.grossIncome, this.INSS);
    }

    private void calculateNetIncome() {
        this.yearlyNetIncome = ((grossIncome+ FGTS) * 11) + ((VR + VA + healthInsurance + VT + lifeInsurance ) * 12) 
            + (PLR * grossIncome) + FGTS + thirteenthSalary + paidVacation - (this.IRRF * 11) - (this.INSS * 11);
        this.monthlyNetIncome = yearlyNetIncome / 12;
    }
}
